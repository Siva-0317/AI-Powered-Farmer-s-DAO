from web3 import Web3
import json
import os
from dotenv import load_dotenv

load_dotenv()

# Connect to Sepolia
w3 = Web3(Web3.HTTPProvider(os.getenv("SEPOLIA_RPC")))

# Load wallet
PRIVATE_KEY = os.getenv("PRIVATE_KEY")
WALLET_ADDRESS = os.getenv("WALLET_ADDRESS")

# Load contract addresses
STABLE_TOKEN = os.getenv("STABLE_TOKEN")
INSURANCE_POOL = os.getenv("INSURANCE_POOL")

# Load ABIs (generated by Hardhat after compilation)
with open("../functions/artifacts/contracts/TestStableToken.sol/TestStableToken.json") as f:
    stable_abi = json.load(f)["abi"]

with open("../functions/artifacts/contracts/FarmInsurancePool.sol/FarmInsurancePool.json") as f:
    pool_abi = json.load(f)["abi"]

stable_contract = w3.eth.contract(address=STABLE_TOKEN, abi=stable_abi)
pool_contract = w3.eth.contract(address=INSURANCE_POOL, abi=pool_abi)

# Function: send transaction
def send_tx(tx):
    tx.update({
        "from": WALLET_ADDRESS,
        "nonce": w3.eth.get_transaction_count(WALLET_ADDRESS),
        "gas": 3000000,
        "gasPrice": w3.to_wei("20", "gwei"),
    })
    signed_tx = w3.eth.account.sign_transaction(tx, PRIVATE_KEY)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
    return w3.to_hex(tx_hash)
def submit_claim_to_chain(policy_id, stress_level, payout_percentage):
    """
    Submit oracle data (like a claim) to the FarmInsurancePool contract.
    stress_level: 0 (not stressed), 1 (stressed)
    payout_percentage: integer scaled by 1e6 (e.g. 650000 for 65%)
    """
    try:
        tx = pool_contract.functions.submitOracleData(
            policy_id,
            stress_level,
            payout_percentage
        ).build_transaction({
            "from": WALLET_ADDRESS,
            "nonce": w3.eth.get_transaction_count(WALLET_ADDRESS),
            "gas": 3000000,
            "gasPrice": w3.to_wei("20", "gwei"),
        })
        
        signed_tx = w3.eth.account.sign_transaction(tx, PRIVATE_KEY)
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        return w3.to_hex(tx_hash)

    except Exception as e:
        print(f"Error submitting claim: {e}")
        return None

